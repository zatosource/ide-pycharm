plugins {
    id "org.jetbrains.intellij" version "1.1.4"
}

repositories {
    mavenCentral()
}

version = '1.2.0'

allprojects {
    apply plugin: 'java'
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

    apply plugin: 'org.jetbrains.intellij'
    intellij {
        pluginName = 'zato'

        version = project.property("ideVersion")
        plugins.add("PythonCore:${project.property("pythonCoreVersion")}")

        downloadSources = true
    }

    patchPluginXml {
        sinceBuild = '201.0'
        untilBuild = '221.*'
    }

    publishPlugin {
        //add a valid token on the command line using '-Dintellij.publish.token=...'
        //https://github.com/JetBrains/gradle-intellij-plugin#publishing-dsl
        token = System.properties['intellij.publish.token']

        //use a custom channel if you'd offer nightly/unstable versions
        //channels 'eap'
    }
    
    runPluginVerifier {
        ideVersions = project.property("ideVerifierVersions").split(",").toList()
    }

    // code coverage using the Jacoco engine, see https://docs.gradle.org/current/userguide/jacoco_plugin.html
    // the coverage reports will be available at build/reports/coverage/test/html/index.html
    apply plugin: 'jacoco'
    jacoco {
        toolVersion = "0.8.5"
        reportsDir = file("$buildDir/reports/coverage")
    }
    test {
        finalizedBy jacocoTestReport
        jacoco {
            enabled true
            includes["com.*"]
        }
    }

    dependencies {
        testImplementation "org.nanohttpd:nanohttpd:2.2.0"
        testImplementation "junit:junit:4.12"
    }

    // test logging configuration, shows test progress and messages to standard error
    // see https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/logging/TestLogEvent.html
    test {
        testLogging {
            events = [
                    org.gradle.api.tasks.testing.logging.TestLogEvent.FAILED,
                    org.gradle.api.tasks.testing.logging.TestLogEvent.PASSED,
                    org.gradle.api.tasks.testing.logging.TestLogEvent.SKIPPED,
                    org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR
            ]
        }
    }
}
